[alias]

	s = status
	co = checkout
	ci = commit
	ch = "!git checkout $(git branch -vv | grep -v '^\\*' | fzf | awk '{print $1}')"
 	a = "! # add files with fzf preview diffs; \n\
		        f() { \
		            _height=$(stty size | awk '{print $1}');\
		            git s | fzf -m --preview \"git diff {2} | head -n $_height | pygmentize\" | awk '{print $2}' | xargs git add; \
		        }; f"
	l = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit
	b0 = "!git branch | awk '/^\\*/{print $2}'"
	bb = "! # Branch tools. Type 'git bb help' ; \n\
		        f() { \n\
		            if [ $# = 0 ]; then \
		                git checkout $(git branch -vv | grep -v '^\\*' | fzf | awk '{print $1}'); \
		            elif [ $1 = 'help' ]; then \
		                echo 'git bb           : Select and checkout branch'; \
		                echo 'git bb c, clean  : Clean all merged branches'; \
		                echo 'git bb d, D      : Delete seleted branches(D: force)'; \
		                echo 'git bb l, list   : List branches excluding the current branch'; \
		                echo 'git bb m, merged : List merged branches excluding the current and master branches'; \
		            elif [ $1 = 'd' -o $1 = 'D' ]; then \
		                git branch -$1 $(git bb list | fzf -m); \
		            elif [ $1 = 'clean' -o $1 = 'c' ]; then \
		                git branch -d $(git bb merged); \
		            elif [ $1 = 'list' -o $1 = 'l' ]; then \
		                git branch | grep -v '^\\*'; \
		            elif [ $1 = 'merged' -o $1 = 'm' ]; then \
		                git branch --merged | grep -v '^\\*\\|\\<master$'; \
		            else \
		                git bb help; \
		            fi; \
		}; f"
	alias = "!# Prints all aliases.;\n\
		    git config --list \
		    | egrep '^alias.+' \
		    | sed -e 's/^alias\\.//' \
		    | sed -e 's/^[^=]*=/\\'$'\\033[31m&\\033[(B\\033[m/' \
		    | column -t -s'=' \
		    | sed 's/!#* *//; s/;$//' \
		    | cut -c1-85"
